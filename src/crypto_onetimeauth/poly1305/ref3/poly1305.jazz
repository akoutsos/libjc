// load assumes little endian
fn load(reg u64 ptr) -> reg u64[2]
{
  reg u64[2] x;
  x[0] = [ptr + 0];
  x[1] = [ptr + 8];
  return x;
}

fn load_len(reg u64 ptr, reg u64 len) -> reg u64[2]
{
  inline int j;
  reg u64 i;
  reg u8 v;
  stack u8[16] m;
  reg u64[2] x;
  reg u64 t;

  i = 0;

  while(i < len)
  { v = (u8)[ptr + i];
    m[(int)i] = v;
    i += 1;
  }

  m[(int)i] = 0x1;
  i += 1;

  while(i < 16)
  { m[(int) i] = 0; i += 1; }

  x[0] = 0;
  x[1] = 0;

  for j=0 to 8
  { t = (64u) m[j];
    t <<= 8*j;
    x[0] |= t; }

  for j=0 to 8
  { t = (64u) m[8+j];
    t <<= 8*j;
    x[1] |= t; }

  return x;
} 

fn clamp(reg u64 k) -> reg u64[2], reg u64
{
  reg u64[2] r;
  reg u64 r54;
  r = load(k);
  r[0] &= 0x0ffffffc0fffffff;
  r[1] &= 0x0ffffffc0ffffffc;
  r54 = r[1]; // r[1] * 5/4
  r54 >>= 2;
  r54 += r[1];
  return r, r54;
}

// h = 2**0 * h[0] + 2**64 * h[1] + 2**128 * h[2]
// m = 2**0 * m[0] + 2**64 * m[1] + 2**128
fn add_m(reg u64[3] h, reg u64[2] m) -> reg u64[3]
{
  reg bool cf;
  cf, h[0] += m[0];
  cf, h[1] += m[1] + cf;
   _, h[2] +=    1 + cf;
  return h;
}

// h = 2**0 * h[0] + 2**64 * h[1] + 2**128 * h[2]
// m = 2**0 * m[0] + 2**64 * m[1]
fn add(reg u64[3] h, reg u64[2] m) -> reg u64[3]
{
  reg bool cf;
  cf, h[0] += m[0];
  cf, h[1] += m[1] + cf;
   _, h[2] +=    0 + cf;
  return h;
}

// h = 2**0 * h[0] + 2**64 * h[1] + 2**128 * h[2]
// r = 2**0 * r[0] + 2**64 * r[1]
//
// h *= r
//
// (2**0 * h[0] + 2**64 * h[1] + 2**128 * h[2]) * 
// (2**0 * r[0] + 2**64 * r[1])
//
// 2**0   * ( h[0] * r[0] ) + 
// 2**64  * ( h[0] * r[1]   + h[1] * r[0] ) +
// 2**128 * ( h[1] * r[1]   + h[2] * r[0] ) +
// 2**192 * ( h[2] * r[1] )
//
// for the reduction: 128 - 130 = -2 => 2^-2
// 
// 2**0   * ( h[0] * r[0]   + (h[1] * r[1] * (5/4)) )
// 2**64  * ( h[0] * r[1]   +  h[1] * r[0]  + (h[2] * r[1] * (5/4)) )
// 2**128 * ( h[2] * r[0]   )
//

fn mulmod(reg u64[3] hh, reg u64[2] r, reg u64 r54) -> reg u64[3]
{
  reg bool cf;  
  reg u64 h, l;
  reg u64[4] t;

  // 2**0

    // h[0] * r[0]
    l = hh[0]; h, l = l * r[0]; // (60b,64b)
    t[0] = l;
    t[1] = h; //~60b
    t[2] = 0;
    t[3] = 0;

    // h[1] * r[1] * (5/4)
    l = hh[1]; h, l = l * r54; // (61b,64b)
    cf, t[0] += l;
     _, t[1] += h + cf; //~63b

  // 2**64

    // h[0] * r[1]
    l = hh[0]; h, l = l * r[1]; // (60b,64b)
    cf, t[1] += l;
     _, t[2] += h + cf; //~61b

    // h[1] * r[0]
    l = hh[1]; h, l = l * r[0]; // (60b,64b)
    cf, t[1] += l;
     _, t[2] += h + cf; //~62b

    // h[2] * r[1] * (5/4)
    l = hh[2];
    l *= r54; // (64b)
    cf, t[1] += l;
     _, t[2] += 0 + cf; //~61b (2^60-1 * 2 + 3)

  // 2**128

    // h[2] * r[0]
    hh[2] *= r[0]; // (63b) 0x5(max possible?) *= 0x0ffffffc0fffffff <=> 


  hh[0] = t[0];
  hh[1] = t[1];
  hh[2] += t[2]; //~63b

  // (h[2] >> 2) * 5 <=> (h[2] >> 2)*4 + (h[2] >> 2) <=> (h[2] >> 2) << 2 + (h[2] >> 2)
  l = hh[2];
  h = hh[2];
  hh[2] &= 3;
  l &= 0xfffffffffffffffc; 
  h >>= 2;
  h += l; // (check safety here : it seems to be safe)

  cf, hh[0] += h;
  cf, hh[1] += 0 + cf;
   _, hh[2] += 0 + cf;
  
  return hh;
}

fn freeze(reg u64[3] h) -> reg u64[3]
{
  reg bool cf;
  reg u64[3] g;

  g = h;

  cf, g[0] += 5;
  cf, g[1] += 0 + cf;
   _, g[2] += 0 + cf;

  g[2] >>= 2;
  g[2] &= 1; // can we verify that this and is not necessary?
  g[2] = -g[2];

  g[0] ^= h[0];
  g[1] ^= h[1];

  g[0] &= g[2];
  g[1] &= g[2];

  h[0] ^= g[0]; // if bit == 1 then h[0] ^= (g[0] ^ h[0])
  h[1] ^= g[1]; // else             h[0] ^= 0

  return h;
}

export fn poly1305_ref3(reg u64 out, reg u64 in, reg u64 inlen, reg u64 k)
{
  inline int i;
  reg u64[3] h;
  reg u64[2] r, m, s;
  reg u64 len, r54;

  r, r54 = clamp(k);
  k += 16;
  for i=0 to 3 { h[i] = 0; }

  len = inlen;
  while(len >= 16)
  { m = load(in); in += 16; len -= 16;
    h = add_m(h, m);
    h = mulmod(h, r, r54);
  }

  if(len > 0)
  { m = load_len(in, len);
    h = add(h, m);
    h = mulmod(h, r, r54);
  }

  h = freeze(h);
  s = load(k);
  h = add(h, s);

  // store assumes little endian : change if necessary
  [out + 0] = h[0];
  [out + 8] = h[1];
}

